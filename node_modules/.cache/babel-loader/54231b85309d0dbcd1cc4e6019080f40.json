{"ast":null,"code":"import _slicedToArray from \"/Users/tank/git/React-Hooks-tutorial/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/React-Hooks-tutorial/src/components/CounterWithEffect.js\";\nimport React, { useState, useEffect, Fragment } from 'react'; // This is a Hook Effect\n// Effects are similar to componentDidMount and componentDidUpdate:\n\nvar Counter = function Counter(props) {\n  // This is a hook. Starts set to 0, modified with setCount, state viewed from count\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1]; // When the component is remounted, changes something. componentDidMount()\n\n\n  useEffect(function () {\n    // Update the document title using the browser API\n    document.title = \"You clicked \".concat(count, \" times\");\n  });\n  console.log('CounterWithEffect props:', props);\n  console.log('Counter sets state of its own\\ncount:', props);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"You clicked \", count, \" times\"), props.editing ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.currentUser.name)) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Click Me\")));\n};\n\nexport default Counter;","map":{"version":3,"sources":["/Users/tank/git/React-Hooks-tutorial/src/components/CounterWithEffect.js"],"names":["React","useState","useEffect","Fragment","Counter","props","count","setCount","document","title","console","log","editing","currentUser","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD,C,CAEA;AACA;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AAEvB;AAFuB,kBAGGJ,QAAQ,CAAC,CAAD,CAHX;AAAA;AAAA,MAGhBK,KAHgB;AAAA,MAGTC,QAHS,kBAMvB;;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd;AACAM,IAAAA,QAAQ,CAACC,KAAT,yBAAgCH,KAAhC;AACD,GAHQ,CAAT;AAKAI,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCN,KAAvC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAoDN,KAApD;AAEA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBC,KAAhB,WADF,EAGKD,KAAK,CAACO,OAAN,GACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAML,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACQ,WAAN,CAAkBC,IADrB,CADF,CADD,GAOC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMP,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAVN,CADF;AAqBD,CApCD;;AAsCA,eAAeF,OAAf","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\n\n// This is a Hook Effect\n// Effects are similar to componentDidMount and componentDidUpdate:\n\nconst Counter = props => {\n\n  // This is a hook. Starts set to 0, modified with setCount, state viewed from count\n  const [count, setCount] = useState(0);\n\n\n  // When the component is remounted, changes something. componentDidMount()\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  });\n\n  console.log('CounterWithEffect props:',props)\n  console.log('Counter sets state of its own\\ncount:',props)\n\n  return (\n    <Fragment>\n      <p>You clicked {count} times</p>\n      \n        {props.editing ? (\n          <Fragment>\n            <button onClick={() => setCount(count + 1)}>\n              {props.currentUser.name}\n            </button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <button onClick={() => setCount(count + 1)}>\n              Click Me\n            </button>\n          </Fragment>\n        )}\n        \n      \n    </Fragment>\n  );\n}\n\nexport default Counter\n"]},"metadata":{},"sourceType":"module"}