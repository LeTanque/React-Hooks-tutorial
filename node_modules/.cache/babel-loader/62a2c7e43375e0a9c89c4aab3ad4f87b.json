{"ast":null,"code":"import _toConsumableArray from \"/Users/tank/git/React-Hooks-tutorial/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/tank/git/React-Hooks-tutorial/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/React-Hooks-tutorial/src/App.js\";\nimport React, { useState, Fragment } from 'react';\nimport UserTable from './tables/UserTable';\nimport AddUserForm from './forms/AddUserForm';\nimport EditUserForm from './forms/EditUserForm';\nimport CounterWithEffect from './components/CounterWithEffect'; // Hooks basically makes a state that is accessible to other components through props.\n// Except you can easily manage state from any linked component.\n// const [ viewState, setState ] = useState(initialState); \n// This is a hook\n// initialState can be pretty much anything\n// setState is going to be a function that you pass the new state into. setState(newState)\n// viewState is the latest state of the hook. Will be stateful when passed to other components\n// const [ state, function ] = useState(const);   // Another way to deconstruct a hook\n// onClick={function(Y)}\n// Now the state becomes Y\n\nvar App = function App() {\n  // Functional component doing cool class component-like state stuff\n  var usersData = [{\n    id: 1,\n    name: 'Tania',\n    username: 'floppydiskette'\n  }, {\n    id: 2,\n    name: 'Craig',\n    username: 'siliconeidolon'\n  }, {\n    id: 3,\n    name: 'Ben',\n    username: 'benisphere'\n  }];\n  var initialFormState = {\n    id: null,\n    name: '',\n    username: ''\n  }; // Users doesn't exist until we create it here, as 'users', \n  // which can be manipulated with setUsers()\n  // When you define two objects and assign to useState(), you make the first a variable, and the second a function\n  // users becomes a variable   (banana keyword)\n  // setUsers() becomes a function that changes 'users' to the argument passed in   (banana keyword)\n  // The argument you pass through useState sets the intial assignment to the variable.\n  // so, 'users' becomes the value of 'usersData'. Then we have stateful usersData.\n\n  var _useState = useState(usersData),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1]; // This is basically 'edit mode'. Creates an 'editing' key in state.  sets it equal to false by default\n  // 'editing' is a stateful value\n  // setEditing is how you modify it from state\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editing = _useState4[0],\n      setEditing = _useState4[1]; // setEditing and setCurrentUser are toggles as well\n  // when setEditing is true, current user is filled. When it's false, current user is clear.\n\n\n  var _useState5 = useState(initialFormState),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUser = _useState6[0],\n      setCurrentUser = _useState6[1]; // Maybe not something would create on a production site, or maybe yes. \n  // React dev tools don't provide much detail about hook state at each component\n  // Not from tutorial\n  // const currentState = [users,editing,currentUser];\n  // Complicated this as a console.log that saves a few clicks\n  // users is current state of users\n  // But, usersData is the initial state only. Don't modify the source supply.\n  // Not from tutorial\n\n\n  var lastUID = users[users.length - 1].id;\n\n  var addUser = function addUser(user) {\n    user.id = lastUID + 1;\n    setUsers([].concat(_toConsumableArray(users), [user])); // setUsers hook taking in the current state and updating it with the current state plus something\n  }; // filter to create an array of everything except the target user. ie: deleteUser(target-user)\n\n\n  var deleteUser = function deleteUser(id) {\n    setUsers(users.filter(function (user) {\n      return user.id !== id;\n    }));\n  }; // editUser is passed to the UserTable and powers the button what toggles the EditUserForm or AddUserForm default.\n  // Makes it so every individual user has a button that triggers this function and defines setCurrentUser\n  // which we pass to EditUserForm and it can be filled with data.\n\n\n  var editUser = function editUser(user) {\n    setEditing(true); // editUser is clicked, change editing state to true, bringing up the EditUserForm\n\n    setCurrentUser({\n      id: user.id,\n      name: user.name,\n      username: user.username\n    });\n  }; // updateUser is passed to the EditUserForm\n\n\n  var updateUser = function updateUser(id, updatedUser) {\n    setEditing(false);\n    setUsers(users.map(function (user) {\n      return user.id === id ? updatedUser : user;\n    })); // Set users is the users array state\n  }; // console.log(lastUID)\n  // console.log('This is the currentUser:',currentUser) // currentUser is in the currentState of App\n\n\n  console.log(\"This is the currentState\", \"\\nusers:\", users, \"\\nediting:\", editing, \"\\ncurrentUser:\", currentUser);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"CRUD App with Hooks\"), React.createElement(\"div\", {\n    className: \"flex-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex-large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, editing ? // If the value of editing is true, show the EditUserForm instead of the AddUserForm\n  React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Edit user\"), React.createElement(EditUserForm, {\n    editing: editing // EditUserForm toggle ON\n    ,\n    setEditing: setEditing // OFF\n    ,\n    currentUser: currentUser // The editUser function provides this object. Button at UserTable\n    ,\n    updateUser: updateUser // \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Add user\"), React.createElement(AddUserForm, {\n    addUser: addUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"flex-large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"View users\"), React.createElement(UserTable, {\n    users: users,\n    deleteUser: deleteUser,\n    editUser: editUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"flex-large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Counter\"), React.createElement(CounterWithEffect, {\n    currentUser: currentUser,\n    editing: editing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/tank/git/React-Hooks-tutorial/src/App.js"],"names":["React","useState","Fragment","UserTable","AddUserForm","EditUserForm","CounterWithEffect","App","usersData","id","name","username","initialFormState","users","setUsers","editing","setEditing","currentUser","setCurrentUser","lastUID","length","addUser","user","deleteUser","filter","editUser","updateUser","updatedUser","map","console","log"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport UserTable from './tables/UserTable';\nimport AddUserForm from './forms/AddUserForm';\nimport EditUserForm from './forms/EditUserForm';\nimport CounterWithEffect from './components/CounterWithEffect';\n\n// Hooks basically makes a state that is accessible to other components through props.\n// Except you can easily manage state from any linked component.\n\n\n// const [ viewState, setState ] = useState(initialState); \n// This is a hook\n// initialState can be pretty much anything\n// setState is going to be a function that you pass the new state into. setState(newState)\n// viewState is the latest state of the hook. Will be stateful when passed to other components\n\n// const [ state, function ] = useState(const);   // Another way to deconstruct a hook\n// onClick={function(Y)}\n// Now the state becomes Y\n\n\nconst App = () => {  // Functional component doing cool class component-like state stuff\n  const usersData = [\n    { id: 1, name: 'Tania', username: 'floppydiskette' },\n    { id: 2, name: 'Craig', username: 'siliconeidolon' },\n    { id: 3, name: 'Ben', username: 'benisphere' },\n  ]\n  const initialFormState = { id: null, name: '', username: '' };\n  \n\n  // Users doesn't exist until we create it here, as 'users', \n  // which can be manipulated with setUsers()\n  // When you define two objects and assign to useState(), you make the first a variable, and the second a function\n  // users becomes a variable   (banana keyword)\n  // setUsers() becomes a function that changes 'users' to the argument passed in   (banana keyword)\n  // The argument you pass through useState sets the intial assignment to the variable.\n  // so, 'users' becomes the value of 'usersData'. Then we have stateful usersData.\n  const [ users, setUsers ] = useState(usersData);\n\n  \n  // This is basically 'edit mode'. Creates an 'editing' key in state.  sets it equal to false by default\n  // 'editing' is a stateful value\n  // setEditing is how you modify it from state\n  const [ editing, setEditing ] = useState(false);\n\n\n  // setEditing and setCurrentUser are toggles as well\n  // when setEditing is true, current user is filled. When it's false, current user is clear.\n  const [ currentUser, setCurrentUser ] = useState(initialFormState); \n\n\n  // Maybe not something would create on a production site, or maybe yes. \n  // React dev tools don't provide much detail about hook state at each component\n  // Not from tutorial\n  // const currentState = [users,editing,currentUser];\n  // Complicated this as a console.log that saves a few clicks\n  \n\n  // users is current state of users\n  // But, usersData is the initial state only. Don't modify the source supply.\n  // Not from tutorial\n  const lastUID = users[users.length - 1].id;       \n  \n\n  const addUser = user => {\n    user.id = lastUID + 1;\n    setUsers([ ...users, user ]) // setUsers hook taking in the current state and updating it with the current state plus something\n  }\n\n\n  // filter to create an array of everything except the target user. ie: deleteUser(target-user)\n  const deleteUser = id => {\n    setUsers(users.filter(user => user.id !== id));\n  }\n\n\n  // editUser is passed to the UserTable and powers the button what toggles the EditUserForm or AddUserForm default.\n  // Makes it so every individual user has a button that triggers this function and defines setCurrentUser\n  // which we pass to EditUserForm and it can be filled with data.\n  const editUser = user => {\n    setEditing(true); // editUser is clicked, change editing state to true, bringing up the EditUserForm\n    setCurrentUser({\n      id:user.id,\n      name:user.name,\n      username:user.username\n    })\n  }\n\n\n  // updateUser is passed to the EditUserForm\n  const updateUser = (id, updatedUser) => { \n    setEditing(false);\n    setUsers(users.map(user => (user.id === id ? updatedUser : user))); // Set users is the users array state\n  }\n\n  // console.log(lastUID)\n  // console.log('This is the currentUser:',currentUser) // currentUser is in the currentState of App\n  console.log(`This is the currentState`,\n  `\\nusers:`,users,\n  `\\nediting:`,editing,\n  `\\ncurrentUser:`,currentUser)\n\n  return (\n    <Fragment>\n\n      <div className=\"container\">\n          <h1>CRUD App with Hooks</h1>\n          <div className=\"flex-row\">\n          <div className=\"flex-large\">\n            {editing ? (  // If the value of editing is true, show the EditUserForm instead of the AddUserForm\n              <Fragment>\n                <h2>Edit user</h2>\n                <EditUserForm\n                  editing={editing} // EditUserForm toggle ON\n                  setEditing={setEditing} // OFF\n                  currentUser={currentUser}   // The editUser function provides this object. Button at UserTable\n                  updateUser={updateUser}     // \n                />\n              </Fragment>\n            ) : (\n              <div>\n                <h2>Add user</h2>\n                <AddUserForm addUser={addUser} />\n              </div>\n            )}\n          </div>\n          <div className=\"flex-large\">\n            <h2>View users</h2>\n            <UserTable \n              users={users} \n              deleteUser={deleteUser} \n              editUser={editUser} \n            />\n          </div>\n          <div className=\"flex-large\">\n            <h2>Counter</h2>\n            <CounterWithEffect \n              currentUser={currentUser}\n              editing={editing}\n\n            />\n          </div>\n\n\n        </div>\n      </div>\n\n    </Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}