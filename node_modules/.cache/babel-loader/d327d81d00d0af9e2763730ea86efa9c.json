{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/React-Hooks-tutorial/src/components/CounterWithEffect.js\";\nimport React, { useEffect, Fragment } from 'react'; // This is a Hook Effect\n// Effects are similar to componentDidMount and componentDidUpdate:\n// The hook side effect is when you click on the counter, it changes the page title\n\nvar Counter = function Counter(props) {\n  // Moved this function to App so that I could play with the counter's state in components above it\n  // const [count, setCount] = useState(0);\n  // When the component is mounted, changes something. componentDidMount() essentially\n  useEffect(function () {\n    document.title = \"You clicked \".concat(props.count, \" times\"); // Update the document title using the browser API\n\n    props.currentUser.score = props.userScore;\n  });\n  console.log('What counter receives\\nprops:', props);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, props.editing ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, props.currentUser.name, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), props.currentUser.username, \" \", props.currentUser.score, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), \"Score: \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, props.userScore)), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.setUserScore(props.userScore + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Score\")) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Edit a user to score points\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.setCount(props.count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Count\")));\n};\n\nexport default Counter;","map":{"version":3,"sources":["/Users/tank/git/React-Hooks-tutorial/src/components/CounterWithEffect.js"],"names":["React","useEffect","Fragment","Counter","props","document","title","count","currentUser","score","userScore","console","log","editing","name","username","setUserScore","setCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;AACA;AACA;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AAGvB;AACA;AAGA;AACAH,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,QAAQ,CAACC,KAAT,yBAAgCF,KAAK,CAACG,KAAtC,YADc,CACwC;;AACtDH,IAAAA,KAAK,CAACI,WAAN,CAAkBC,KAAlB,GAA0BL,KAAK,CAACM,SAAhC;AACD,GAHQ,CAAT;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA4CR,KAA5C;AAGA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGA,KAAK,CAACS,OAAN,GACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,CAACI,WAAN,CAAkBM,IADrB,EAC0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD1B,EAEGV,KAAK,CAACI,WAAN,CAAkBO,QAFrB,OAEgCX,KAAK,CAACI,WAAN,CAAkBC,KAFlD,EAEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFxD,aAGS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASL,KAAK,CAACM,SAAf,CAHT,CADF,EAKE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMN,KAAK,CAACY,YAAN,CAAmBZ,KAAK,CAACM,SAAN,GAAkB,CAArC,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,CADD,GAWC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMN,KAAK,CAACa,QAAN,CAAeb,KAAK,CAACG,KAAN,GAAc,CAA7B,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CAdJ,CADF;AA0BD,CA3CD;;AA6CA,eAAeJ,OAAf","sourcesContent":["import React, { useEffect, Fragment } from 'react';\n\n// This is a Hook Effect\n// Effects are similar to componentDidMount and componentDidUpdate:\n// The hook side effect is when you click on the counter, it changes the page title\n\nconst Counter = props => {\n\n\n  // Moved this function to App so that I could play with the counter's state in components above it\n  // const [count, setCount] = useState(0);\n\n\n  // When the component is mounted, changes something. componentDidMount() essentially\n  useEffect(() => {\n    document.title = `You clicked ${props.count} times`;  // Update the document title using the browser API\n    props.currentUser.score = props.userScore;\n  });\n\n\n  console.log('What counter receives\\nprops:',props)\n\n\n  return (\n    <Fragment>\n      \n      \n      {props.editing ? (\n        <Fragment>\n          <p>\n            {props.currentUser.name}<br />\n            {props.currentUser.username} {props.currentUser.score}<br />\n            Score: <strong>{props.userScore}</strong></p>\n          <button onClick={() => props.setUserScore(props.userScore + 1)}>\n            Score\n          </button>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>Edit a user to score points</p>\n          <button onClick={() => props.setCount(props.count + 1)}>\n            Count\n          </button>\n        </Fragment>\n      )}\n        \n      \n    </Fragment>\n  );\n}\n\nexport default Counter\n"]},"metadata":{},"sourceType":"module"}