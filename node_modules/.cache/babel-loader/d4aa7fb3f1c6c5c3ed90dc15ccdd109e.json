{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/React-Hooks-tutorial/src/components/CounterWithEffect.js\";\nimport React, { useEffect, Fragment } from 'react'; // This is a Hook Effect\n// Effects are similar to componentDidMount and componentDidUpdate:\n\nvar Counter = function Counter(props) {\n  // Moved this to App so that I could play with the counter's state in components above it\n  // This is a hook. Starts set to 0, modified with setCount, state viewed from count\n  // const [count, setCount] = useState(0);\n  // When the component is mounted, changes something. componentDidMount() essentially\n  useEffect(function () {\n    document.title = \"You clicked \".concat(props.count, \" times\"); // Update the document title using the browser API\n  });\n  console.log('Counter sets state of its own\\ncount:', props);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, props.editing ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.currentUser.name, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), \"Score: \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.count)), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.setCount(props.count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"BOOM\")) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Edit a user to score points\")));\n};\n\nexport default Counter;","map":{"version":3,"sources":["/Users/tank/git/React-Hooks-tutorial/src/components/CounterWithEffect.js"],"names":["React","useEffect","Fragment","Counter","props","document","title","count","console","log","editing","currentUser","name","setCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;AACA;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AAEvB;AACA;AACA;AAGA;AACAH,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,QAAQ,CAACC,KAAT,yBAAgCF,KAAK,CAACG,KAAtC,YADc,CACwC;AACvD,GAFQ,CAAT;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAoDL,KAApD;AAEA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGA,KAAK,CAACM,OAAN,GACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIN,KAAK,CAACO,WAAN,CAAkBC,IAAtB,EAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA3B,aAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASR,KAAK,CAACG,KAAf,CAAxC,CADF,EAEE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMH,KAAK,CAACS,QAAN,CAAeT,KAAK,CAACG,KAAN,GAAc,CAA7B,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADD,GAQC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,CAXJ,CADF;AAoBD,CAlCD;;AAoCA,eAAeJ,OAAf","sourcesContent":["import React, { useEffect, Fragment } from 'react';\n\n// This is a Hook Effect\n// Effects are similar to componentDidMount and componentDidUpdate:\n\nconst Counter = props => {\n\n  // Moved this to App so that I could play with the counter's state in components above it\n  // This is a hook. Starts set to 0, modified with setCount, state viewed from count\n  // const [count, setCount] = useState(0);\n\n\n  // When the component is mounted, changes something. componentDidMount() essentially\n  useEffect(() => {\n    document.title = `You clicked ${props.count} times`;  // Update the document title using the browser API\n  });\n\n  console.log('Counter sets state of its own\\ncount:',props)\n\n  return (\n    <Fragment>\n      \n      \n      {props.editing ? (\n        <Fragment>\n          <p>{props.currentUser.name}<br />Score: <strong>{props.count}</strong></p>\n          <button onClick={() => props.setCount(props.count + 1)}>\n            BOOM\n          </button>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>Edit a user to score points</p>\n        </Fragment>\n      )}\n        \n      \n    </Fragment>\n  );\n}\n\nexport default Counter\n"]},"metadata":{},"sourceType":"module"}